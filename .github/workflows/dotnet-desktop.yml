name: UnityBuild

on:
  schedule:
    # 매일 24시간마다 (UTC 기준)
    - cron: "0 0 * * *"
           # ┬ ┬ ┬ ┬ ┬
           # │ │ │ │ │
           # │ │ │ │ └─ Day of week (0 - 7) (0 or 7 is Sunday)
           # │ │ │ └─ Month (1 - 12)
           # │ │ └─ Day of month (1 - 31)
           # │ └─ Hour (0 - 23)
           # └─ Minute (0 - 59)
    
  workflow_dispatch: # 수동 실행 가능

permissions: write-all

# env:
#   RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}

jobs:
  buildForAndroidApk:
    name: Build Android APK 🛸
    runs-on: self-hosted

    steps:
  #     # 프로젝트 체크아웃
  #     - name: Check Out
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         lfs: true

  #     # Unity Library 초기화 (에셋 DB 생성)
  #     - name: Initialize Unity Library
  #       shell: powershell
  #       run: |
  #         $unityExe = "C:\Program Files\Unity\Hub\Editor\2022.3.60f1\Editor\Unity.exe"
  #         $args = @(
  #           "-batchmode",
  #           "-nographics",
  #           "-quit",
  #           "-projectPath", "${{ github.workspace }}",
  #           "-logFile", "${{ github.workspace }}\unity_init.log",
  #           "-executeMethod", "BuildScript.InitLibrary"
  #         )
      
  #         Write-Host "Initializing Unity Library..."
  #         & $unityExe $args
  #         if ($LASTEXITCODE -ne 0) {
  #           Write-Host "Unity Library Initialization Failed!"
  #           exit $LASTEXITCODE
  #         }

  #     # Library 캐시
  #     - name: Cache Library
  #       uses: actions/cache@v4
  #       with:
  #         path: Library
  #         key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
  #         restore-keys: |
  #           Library-

  #     # 씬 존재 확인 (Runner에서)
  #     - name: Verify Scenes
  #       shell: powershell
  #       run: |
  #         $scenes = @("Assets/Scenes/SampleScene.unity")
  #         foreach ($s in $scenes) {
  #           if (-not (Test-Path $s)) {
  #             Write-Error "씬 파일이 존재하지 않음: $s"
  #             exit 1
  #           } else {
  #             Write-Host "씬 존재 확인: $s"
  #           }
  #         }

  #     # Unity 빌드 실행
  #     - name: Build Android APK
  #       shell: powershell
  #       run: |
  #         $unityExe = "C:\Program Files\Unity\Hub\Editor\2022.3.60f1\Editor\Unity.exe"
  #         $args = "-batchmode -nographics -quit -projectPath `"$env:GITHUB_WORKSPACE`" -executeMethod BuildScript.BuildAndroid -logFile `"$env:GITHUB_WORKSPACE\unity_build.log`" -ignore-import-errors"
      
  #         Write-Host "Unity Build Start..."
  #         Start-Process -FilePath $unityExe -ArgumentList $args -Wait
  #         Write-Host "Unity Build Complete."

      # rclone 설치
      - name: Install rclone
        shell: powershell
        run: choco upgrade rclone -y

      # service-account.json 복원
      - name: Setup service account file
        shell: powershell
        run: |
          $saPath = Join-Path $env:GITHUB_WORKSPACE "service-account.json"
          $bytes = [System.Text.Encoding]::UTF8.GetBytes('${{ secrets.SERVICE_ACCOUNT_JSON }}')
          [System.IO.File]::WriteAllBytes($saPath, $bytes)
          
      # rclone config 생성
      - name: Setup rclone config
        shell: powershell
        run: |
          $rclonePath = Join-Path $env:USERPROFILE ".config\rclone"
          if (-Not (Test-Path $rclonePath)) { New-Item -ItemType Directory -Force -Path $rclonePath }

          $rcloneConf = @"
          [gdrive_apk]
          type = drive
          scope = drive
          service_account_file = $env:GITHUB_WORKSPACE\service-account.json
          team_drive = 11EIuv5zMr8TawQle8TEKrJWffgWsCC3P
          "@

          $rcloneConf | Out-File -FilePath (Join-Path $rclonePath "rclone.conf") -Encoding UTF8

      # # Unity 버전 추출
      # - name: Export Unity Version
      #   shell: powershell
      #   run: |
      #     $unityExe = "C:\Program Files\Unity\Hub\Editor\2022.3.60f1\Editor\Unity.exe"
      #     $args = "-batchmode -quit -projectPath . -executeMethod BuildInfoExporter.ExportVersion"
      #     Start-Process -FilePath $unityExe -ArgumentList $args -Wait
      
      # Unity 버전 읽기
      - name: Read Unity Version
        id: version
        shell: powershell
        run: |
          $VERSION = Get-Content -Path "unity_version.txt" -Raw
          "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding ASCII

      # rclone 공유 드라이브 테스트
      - name: Test rclone Remote and Shared Drive
        shell: powershell
        run: |
          Write-Host "==== List all rclone remotes ===="
          rclone listremotes
      
          Write-Host "==== List root of shared drive (gdrive_apk) ===="
          rclone lsd gdrive_apk:

      # 빌드 파일 이름 변경 및 Google Drive 업로드
      - name: Rename and Upload to Google Drive (APK)
        shell: powershell
        run: |
          $DATE = Get-Date -Format "yyyyMMdd"
          $VERSION = '${{ steps.version.outputs.version }}'
          $APK_PATH = Get-ChildItem "build\Android\*.apk" | Select-Object -First 1
          $FILE_NAME = "${DATE}_${VERSION}.apk"
          $DEST_PATH = "build\Android\$FILE_NAME"
          
          Move-Item -Path $APK_PATH.FullName -Destination $DEST_PATH -Force
          rclone copy $DEST_PATH "gdrive_apk:'01 프로젝트/03 악사키우기/60 빌드/APK'" -P

      # # 빌드 폴더 정리
      # - name: Cleanup Build Folder
      #   shell: powershell
      #   run: |
      #     if (Test-Path "build") { Remove-Item "build\*" -Recurse -Force }
