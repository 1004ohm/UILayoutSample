name: UnityBuild

on:
  schedule:
    # Îß§Ïùº 24ÏãúÍ∞ÑÎßàÎã§ (UTC Í∏∞Ï§Ä)
    - cron: "0 0 * * *"
           # ‚î¨ ‚î¨ ‚î¨ ‚î¨ ‚î¨
           # ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ
           # ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ Day of week (0 - 7) (0 or 7 is Sunday)
           # ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ Month (1 - 12)
           # ‚îÇ ‚îÇ ‚îî‚îÄ Day of month (1 - 31)
           # ‚îÇ ‚îî‚îÄ Hour (0 - 23)
           # ‚îî‚îÄ Minute (0 - 59)
  workflow_dispatch: # ÏàòÎèô Ïã§ÌñâÎèÑ Í∞ÄÎä•

permissions: write-all

env:
  RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
  
jobs:
  buildForAndroidApk:
    name: Build Android APK üõ∏
    runs-on: self-hosted
    timeout-minutes: 60
    
    steps:
        - name: Check Out
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
            lfs: true
  
        - name: Cache Library
          uses: actions/cache@v4
          with:
            path: Library
            key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
            restore-keys: |
              Library-

        - name: Activate Unity License
          timeout-minutes: 5
          shell: powershell
          run: |
            $unityExe = "C:\Program Files\Unity\Hub\Editor\2022.3.60f1\Editor\Unity.exe"
            
            Write-Host "Activating Unity license..."
            
            # -quit Ï†úÍ±∞: ÎùºÏù¥ÏÑºÏä§ ÌôúÏÑ±ÌôîÍ∞Ä ÏôÑÎ£åÎê† ÎïåÍπåÏßÄ ÌîÑÎ°úÏÑ∏Ïä§ Ïú†ÏßÄ
            $process = Start-Process -FilePath $unityExe -ArgumentList @(
              "-batchmode",
              "-nographics",
              "-username", "${{ secrets.UNITY_EMAIL }}",
              "-password", "${{ secrets.UNITY_PASSWORD }}"
            ) -PassThru -NoNewWindow
            
            $timeout = 180
            $elapsed = 0
            while (-not $process.HasExited -and $elapsed -lt $timeout) {
              Start-Sleep -Seconds 5
              $elapsed += 5
              if ($elapsed % 30 -eq 0) {
                Write-Host "Waiting for license activation... ($elapsed seconds)"
              }
            }
            
            if (-not $process.HasExited) {
              Write-Host "License activation timeout, forcing exit..."
              Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 2
            }
            
            $exitCode = $process.ExitCode
            Write-Host "License process exit code: $exitCode"
            
            # Exit code 0 ÎòêÎäî 1 Î™®Îëê ÌóàÏö© (UnityÎäî ÎùºÏù¥ÏÑºÏä§ ÌôúÏÑ±Ìôî ÌõÑ 1Î°ú Ï¢ÖÎ£åÌï† Ïàò ÏûàÏùå)
            if ($exitCode -gt 1) {
              Write-Error "License activation failed with exit code $exitCode"
              exit 1
            }
            
            Write-Host "License activation completed"

        - name: Unity Build (APK)
          timeout-minutes: 30
          shell: powershell
          run: |
            $unityExe = "C:\Program Files\Unity\Hub\Editor\2022.3.60f1\Editor\Unity.exe"
            $projectPath = $pwd.Path
            $logFile = Join-Path $projectPath "unity_build.log"
            
            if (Test-Path "build") {
              Remove-Item "build" -Recurse -Force
            }
            
            Write-Host "Starting Unity build..."
            
            $process = Start-Process -FilePath $unityExe -ArgumentList @(
              "-batchmode",
              "-nographics",
              "-quit",
              "-projectPath", $projectPath,
              "-executeMethod", "BuildScript.BuildAndroid",
              "-logFile", $logFile
            ) -PassThru -NoNewWindow
            
            $timeout = 1500
            $elapsed = 0
            while (-not $process.HasExited -and $elapsed -lt $timeout) {
              Start-Sleep -Seconds 10
              $elapsed += 10
              if ($elapsed % 60 -eq 0) {
                Write-Host "Building... ($([math]::Floor($elapsed/60)) minutes elapsed)"
              }
            }
            
            if (-not $process.HasExited) {
              Write-Host "Build timeout, killing process..."
              Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
              exit 1
            }
            
            if (Test-Path $logFile) {
              Write-Host "`n=== Build Log (Last 50 lines) ==="
              Get-Content $logFile -Tail 50
            }
            
            $exitCode = $process.ExitCode
            Write-Host "`nBuild process exit code: $exitCode"
            
            if ($exitCode -ne 0) {
              Write-Error "Build failed with exit code $exitCode"
              exit 1
            }
            
            $expectedApk = "build\Android\Android.apk"
            if (-Not (Test-Path $expectedApk)) {
                Write-Error "APK not found at: $expectedApk"
                exit 1
            }
            
            $apkSize = (Get-Item $expectedApk).Length / 1MB
            Write-Host "Build completed successfully! APK size: $([math]::Round($apkSize, 2)) MB"
  
        - name: Install rclone
          shell: powershell
          run: |
            $env:PATH += ";C:\ProgramData\chocolatey\bin"
            choco upgrade rclone -y
  
        - name: Setup rclone config
          shell: powershell
          run: |
            $rclonePath = Join-Path $env:USERPROFILE ".config\rclone"
            if (-Not (Test-Path $rclonePath)) { 
              New-Item -ItemType Directory -Force -Path $rclonePath 
            }
            $env:RCLONE_CONFIG | Out-File -FilePath (Join-Path $rclonePath "rclone.conf") -Encoding ASCII
  
        - name: Rename APK with Date & Version
          id: rename_apk
          shell: powershell
          run: |
            $DATE = Get-Date -Format "yyyyMMdd"
            $VERSION = "v1.0"
            $buildPath = "build\Android"
            $apkFile = Join-Path $buildPath "Android.apk"
            $newName = "${DATE}_${VERSION}.apk"
            $newPath = Join-Path $buildPath $newName
            
            if (-Not (Test-Path $apkFile)) {
              Write-Error "APK not found for renaming: $apkFile"
              exit 1
            }
            
            Move-Item -Path $apkFile -Destination $newPath -Force
            Write-Host "APK renamed: $newName"
            "apk_path=$newPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding ASCII -Append
  
        - name: Upload to Google Drive
          shell: powershell
          run: |
            $apkPath = "${{ steps.rename_apk.outputs.apk_path }}"
            
            if (-Not (Test-Path $apkPath)) {
              Write-Error "APK not found for upload: $apkPath"
              exit 1
            }
            
            Write-Host "Uploading to Google Drive..."
            rclone copy $apkPath "gdrive:1bJ-xWbifFZY9KuQaPSpCi1KoLy9GQp38" -P
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Upload completed successfully"
            } else {
              Write-Error "Upload failed with exit code $LASTEXITCODE"
              exit 1
            }
  
        - name: Cleanup Build Folder
          if: always()
          shell: powershell
          run: |
            if (Test-Path "build") { 
              Remove-Item "build\*" -Recurse -Force 
              Write-Host "Build folder cleaned"
            }
