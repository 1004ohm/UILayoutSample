name: UnityBuild

on:
  schedule:
    # Îß§Ïùº 24ÏãúÍ∞ÑÎßàÎã§ (UTC Í∏∞Ï§Ä)
    - cron: "0 0 * * *"
           # ‚î¨ ‚î¨ ‚î¨ ‚î¨ ‚î¨
           # ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ
           # ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ Day of week (0 - 7) (0 or 7 is Sunday)
           # ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ Month (1 - 12)
           # ‚îÇ ‚îÇ ‚îî‚îÄ Day of month (1 - 31)
           # ‚îÇ ‚îî‚îÄ Hour (0 - 23)
           # ‚îî‚îÄ Minute (0 - 59)
  workflow_dispatch: # ÏàòÎèô Ïã§ÌñâÎèÑ Í∞ÄÎä•

permissions: write-all

env:
  RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  
jobs:
  buildForAndroidApk:
    name: Build Android APK üõ∏
    runs-on: self-hosted
    
    steps:
        - name: Check Out
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
            lfs: true
  
        - name: Cache Library
          uses: actions/cache@v4
          with:
            path: Library
            key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
            restore-keys: |
              Library-

        # ÎùºÏù¥ÏÑºÏä§ ÌôúÏÑ±Ìôî Îã®Í≥Ñ Ï∂îÍ∞Ä
        - name: Activate Unity License
          shell: powershell
          run: |
            $unityExe = "C:\Program Files\Unity\Hub\Editor\2022.3.60f1\Editor\Unity.exe"
            
            # ÎùºÏù¥ÏÑºÏä§ ÏÉÅÌÉú ÌôïÏù∏
            Write-Host "Checking Unity license status..."
            
            # Personal/Plus ÎùºÏù¥ÏÑºÏä§Ïùò Í≤ΩÏö∞ (LICENSEÏù¥ ÏóÜÎäî Í≤ΩÏö∞)
            if ([string]::IsNullOrEmpty($env:UNITY_LICENSE)) {
              Write-Host "Using Personal/Plus license"
              & $unityExe -batchmode -quit -nographics -returnlicense 2>&1 | Out-Null
              & $unityExe -batchmode -quit -nographics -username "$env:UNITY_EMAIL" -password "$env:UNITY_PASSWORD"
            } else {
              # Pro ÎùºÏù¥ÏÑºÏä§Ïùò Í≤ΩÏö∞
              Write-Host "Using Pro license with LICENSE"
              & $unityExe -batchmode -quit -nographics -username "$env:UNITY_EMAIL" -password "$env:UNITY_PASSWORD" -LICENSE "$env:UNITY_LICENSE"
            }
            
            Write-Host "License activation completed"
  
        - name: Unity Build (APK)
          shell: powershell
          run: |
            $unityExe = "C:\Program Files\Unity\Hub\Editor\2022.3.60f1\Editor\Unity.exe"
            $logFile = "unity_build.log"
            
            $args = @(
              "-batchmode"
              "-nographics"
              "-quit"
              "-projectPath", "."
              "-executeMethod", "BuildScript.BuildAndroid"
              "-logFile", $logFile
            )
            
            Write-Host "Starting Unity build..."
            & $unityExe $args
            
            # Î°úÍ∑∏ Ï∂úÎ†•
            if (Test-Path $logFile) {
              Get-Content $logFile -Tail 100
            }
  
            # ÎπåÎìú Í≤∞Í≥º ÌôïÏù∏
            $buildPath = "build\Android"
            $apkFile = Join-Path $buildPath "Android.apk"
            
            if (-Not (Test-Path $apkFile)) {
                Write-Error "APK not found at: $apkFile"
                Write-Host "Build directory contents:"
                if (Test-Path $buildPath) {
                  Get-ChildItem $buildPath -Recurse
                }
                exit 1
            } else {
                Write-Host "‚úÖ APK generated successfully: $apkFile"
            }
  
        - name: Install rclone
          shell: powershell
          run: |
            $env:PATH += ";C:\ProgramData\chocolatey\bin"
            choco upgrade rclone -y
  
        - name: Setup rclone config
          shell: powershell
          run: |
            $rclonePath = Join-Path $env:USERPROFILE ".config\rclone"
            if (-Not (Test-Path $rclonePath)) { 
              New-Item -ItemType Directory -Force -Path $rclonePath 
            }
            $env:RCLONE_CONFIG | Out-File -FilePath (Join-Path $rclonePath "rclone.conf") -Encoding ASCII
  
        - name: Rename APK with Date & Version
          id: rename_apk
          shell: powershell
          run: |
            $DATE = Get-Date -Format "yyyyMMdd"
            $VERSION = "v1.0"
            $buildPath = "build\Android"
            $apkFile = Join-Path $buildPath "Android.apk"
            $newName = "${DATE}_${VERSION}.apk"
            $newPath = Join-Path $buildPath $newName
            
            if (Test-Path $apkFile) {
              Move-Item -Path $apkFile -Destination $newPath -Force
              Write-Host "‚úÖ APK renamed to $newPath"
              "apk_path=$newPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding ASCII -Append
            } else {
              Write-Error "APK file not found for renaming"
              exit 1
            }
  
        - name: Upload to Google Drive
          shell: powershell
          run: |
            $apkPath = "${{ steps.rename_apk.outputs.apk_path }}"
            Write-Host "Uploading $apkPath to Google Drive..."
            rclone copy $apkPath "gdrive:1bJ-xWbifFZY9KuQaPSpCi1KoLy9GQp38" -P
  
        - name: Cleanup Build Folder
          if: always()
          shell: powershell
          run: |
            if (Test-Path "build") { 
              Remove-Item "build\*" -Recurse -Force 
              Write-Host "Build folder cleaned"
            }
