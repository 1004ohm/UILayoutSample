name: UnityBuild

on:
  schedule:
    # 매일 24시간마다 (UTC 기준)
    - cron: "0 0 * * *"
           # ┬ ┬ ┬ ┬ ┬
           # │ │ │ │ │
           # │ │ │ │ └─ Day of week (0 - 7) (0 or 7 is Sunday)
           # │ │ │ └─ Month (1 - 12)
           # │ │ └─ Day of month (1 - 31)
           # │ └─ Hour (0 - 23)
           # └─ Minute (0 - 59)
    
  workflow_dispatch: # 수동 실행 가능

permissions: write-all

env:
  RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}

    steps:
      # 1. 프로젝트 체크아웃
      - name: Check Out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # 2. Unity 라이선스 활성화
      - name: Activate Unity License
        shell: powershell
        run: |
          $unityExe = "C:\Program Files\Unity\Hub\Editor\2022.3.60f1\Editor\Unity.exe"
          & $unityExe -batchmode -nographics -quit -username $env:UNITY_USERNAME -password $env:UNITY_PASSWORD -serial $env:UNITY_SERIAL -logFile "$env:GITHUB_WORKSPACE\unity_license.log"
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Unity License Activation Failed!"
            exit $LASTEXITCODE
          }

      # 3. 씬 존재 확인
      - name: Verify Scenes
        shell: powershell
        run: |
          $scenes = @("Assets/Scenes/SampleScene.unity")
          foreach ($s in $scenes) {
            if (-not (Test-Path $s)) {
              Write-Error "씬 파일이 존재하지 않음: $s"
              exit 1
            } else {
              Write-Host "씬 존재 확인: $s"
            }
          }

      # 4. Unity Library 초기화
      - name: Initialize Unity Library
        shell: powershell
        run: |
          $unityExe = "C:\Program Files\Unity\Hub\Editor\2022.3.60f1\Editor\Unity.exe"
          $args = @(
            "-batchmode",
            "-nographics",
            "-quit",
            "-projectPath", "${{ github.workspace }}",
            "-logFile", "${{ github.workspace }}\unity_init.log",
            "-executeMethod", "BuildScript.InitLibrary"
          )
          Write-Host "Initializing Unity Library..."
          & $unityExe $args
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Unity Library Initialization Failed!"
            exit $LASTEXITCODE
          }

      # 5. Unity 빌드 실행
      - name: Build Android APK
        shell: powershell
        run: |
          $unityExe = "C:\Program Files\Unity\Hub\Editor\2022.3.60f1\Editor\Unity.exe"
          $args = @(
            "-batchmode",
            "-nographics",
            "-quit",
            "-projectPath", "${{ github.workspace }}",
            "-buildTarget", "Android",
            "-executeMethod", "BuildScript.BuildAndroid",
            "-logFile", "${{ github.workspace }}\unity_build.log",
            "-ignore-import-errors"
          )
          Write-Host "Unity Build Start..."
          & $unityExe $args
          if ($LASTEXITCODE -ne 0) { 
            Write-Host "Unity Build Failed!"
            exit $LASTEXITCODE
          }
          Write-Host "Unity Build Complete."

      # 6. rclone 설치 및 업로드
      - name: Install rclone
        shell: powershell
        run: choco upgrade rclone -y

      - name: Setup rclone config
        shell: powershell
        run: |
          $rclonePath = Join-Path $env:USERPROFILE ".config\rclone"
          if (-Not (Test-Path $rclonePath)) { New-Item -ItemType Directory -Force -Path $rclonePath }
          $env:RCLONE_CONFIG | Out-File -FilePath (Join-Path $rclonePath "rclone.conf") -Encoding ASCII

      - name: Upload APK to Google Drive
        shell: powershell
        run: |
          $DATE = Get-Date -Format "yyyyMMdd"
          $APK = Get-ChildItem -Path "build/Android/" -Filter "*.apk" | Select-Object -First 1
          $NEW_NAME = "${DATE}_$($APK.Name)"
          Rename-Item -Path $APK.FullName -NewName $NEW_NAME -Force
          rclone copy "build/Android/$NEW_NAME" "gdrive:1bJ-xWbifFZY9KuQaPSpCi1KoLy9GQp38" -P

      # 7. 빌드 폴더 정리
      - name: Cleanup Build Folder
        shell: powershell
        run: |
          if (Test-Path "build") { Remove-Item "build\*" -Recurse -Force }
