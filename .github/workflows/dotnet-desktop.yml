name: UnityBuild

on:
  workflow_dispatch:  # 수동 실행 가능
  schedule:
    - cron: "0 0 * * *"  # 매일 UTC 기준 0시

permissions: write-all

jobs:
  build_android:
    name: Build Android APK
    runs-on: self-hosted
    steps:
      # 1️⃣ 프로젝트 체크아웃
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # 2️⃣ 씬 존재 확인
      - name: Verify Scenes
        shell: powershell
        run: |
          $scenes = @("Assets/Scenes/SampleScene.unity")
          foreach ($s in $scenes) {
              if (-not (Test-Path $s)) {
                  Write-Error "씬 파일이 존재하지 않음: $s"
                  exit 1
              } else {
                  Write-Host "씬 존재 확인: $s"
              }
          }

      # 3️⃣ Unity 라이브러리 초기화
      - name: Initialize Unity Library
        shell: powershell
        run: |
          $unityExe = "C:\Program Files\Unity\Hub\Editor\2022.3.60f1\Editor\Unity.exe"
          $args = @(
            "-batchmode",
            "-nographics",
            "-quit",
            "-projectPath", "${{ github.workspace }}",
            "-logFile", "${{ github.workspace }}\unity_init.log",
            "-executeMethod", "BuildScript.InitLibrary"
          )
          Write-Host "Initializing Unity Library..."
          & $unityExe $args
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Unity Library Initialization Failed!"
              exit $LASTEXITCODE
          }

      # 4️⃣ Library 캐시
      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # 5️⃣ Unity 빌드
      - name: Build Android APK
        shell: powershell
        run: |
          $unityExe = "C:\Program Files\Unity\Hub\Editor\2022.3.60f1\Editor\Unity.exe"
          $args = @(
            "-batchmode",
            "-nographics",
            "-quit",
            "-projectPath", "${{ github.workspace }}",
            "-buildTarget", "Android",
            "-executeMethod", "BuildScript.BuildAndroid",
            "-logFile", "${{ github.workspace }}\unity_build.log",
            "-ignore-import-errors"
          )
          Write-Host "Unity Build Start..."
          & $unityExe $args
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Unity Build Failed!"
              exit $LASTEXITCODE
          }
          Write-Host "Unity Build Complete."

      # 6️⃣ Unity 버전 추출
      - name: Export Unity Version
        shell: powershell
        run: |
          $unityExe = "C:\Program Files\Unity\Hub\Editor\2022.3.60f1\Editor\Unity.exe"
          $args = @(
            "-batchmode",
            "-quit",
            "-projectPath", "${{ github.workspace }}",
            "-executeMethod", "BuildInfoExporter.ExportVersion"
          )
          & $unityExe $args

      # 7️⃣ Unity 버전 읽기
      - name: Read Unity Version
        id: version
        shell: powershell
        run: |
          $VERSION = Get-Content -Path "unity_version.txt" -Raw
          "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding ASCII

      # 8️⃣ APK 이름 변경 후 Google Drive 업로드
      - name: Rename and Upload APK
        shell: powershell
        run: |
          $DATE = Get-Date -Format "yyyyMMdd"
          $VERSION = '${{ steps.version.outputs.version }}'
          $FILE_NAME = "${DATE}_${VERSION}.apk"
          Move-Item -Path "build\Android\*.apk" -Destination "build\Android\$FILE_NAME" -Force
          rclone copy "build\Android\$FILE_NAME" "gdrive:YOUR_DRIVE_FOLDER_ID" -P

      # 9️⃣ 빌드 폴더 정리
      - name: Cleanup Build Folder
        shell: powershell
        run: |
          if (Test-Path "build") { Remove-Item "build\*" -Recurse -Force }
